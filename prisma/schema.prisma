datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id                    String        @id @default(cuid())
  name                  String?
  weightUnitPreference  WeightUnit    @default(KG) @map("weight_unit_preference")
  themePreference       Theme         @default(SYSTEM) @map("theme_preference")
  email                 String        @unique
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  password              Password?
  exercises             Exercise[]
  subscription          Subscription?
  stripeCustomerId      String?       @unique @map("stripe_customer_id")
  role                  Role          @default(USER)
  subscriptionCheckedAt DateTime      @default(now())
  folders               Folder[]

  @@map("users")
}

enum WeightUnit {
  KG
  LBS
}

enum Theme {
  SYSTEM
  LIGHT
  DARK
}

enum Role {
  USER
  ADMIN
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @map("user_id")

  @@map("passwords")
}

model Subscription {
  id                 String  @id @unique // Managed by Stripe - (Subscription ID)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String  @unique
  status             String
  currentPeriodStart Int     @map("current_period_start")
  currentPeriodEnd   Int     @map("current_period_end")
  cancelAtPeriodEnd  Boolean @default(false) @map("cancel_at_period_end")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model Exercise {
  id                  String        @id @default(cuid())
  name                String
  user                User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              String?       @map("user_id")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  primaryMuscleGroups MuscleGroup[] @relation("PrimaryMuscleGroups")
  otherMuscleGroups   MuscleGroup[] @relation("OtherMuscleGroups")
  shared              Boolean       @default(false) // Whether this exercise is shared by all users.

  @@unique([name, userId])
  @@map("exercises")
}

model MuscleGroup {
  id                 String     @id @default(cuid())
  name               String     @unique // The name of the muscle group, like "Chest" or "Back" for example.
  primaryOfExercises Exercise[] @relation("PrimaryMuscleGroups")
  otherOfExercises   Exercise[] @relation("OtherMuscleGroups")

  @@map("muscle_groups")
}

model Folder {
  id     String @id @default(cuid())
  name   String @unique // The name of the program, like PPL
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
}

model Routine {
  id String @id @default(cuid())
}
