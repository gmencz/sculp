datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                    String            @id @default(cuid())
  name                  String?
  weightUnitPreference  WeightUnit        @default(KG) @map("weight_unit_preference")
  themePreference       Theme             @default(SYSTEM) @map("theme_preference")
  trackRir              Boolean           @default(false) @map("track_rir")
  email                 String            @unique
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  password              Password?
  exercises             Exercise[]
  subscription          Subscription?
  stripeCustomerId      String?           @unique @map("stripe_customer_id")
  role                  Role              @default(USER)
  subscriptionCheckedAt DateTime          @default(now())
  folders               Folder[]
  routines              Routine[]
  trainingSessions      TrainingSession[]

  @@map("users")
}

enum WeightUnit {
  KG
  LBS
}

enum Theme {
  SYSTEM
  LIGHT
  DARK
}

enum Role {
  USER
  ADMIN
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @map("user_id")

  @@map("passwords")
}

model Subscription {
  id                 String  @id @unique // Managed by Stripe - (Subscription ID)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String  @unique
  status             String
  currentPeriodStart Int     @map("current_period_start")
  currentPeriodEnd   Int     @map("current_period_end")
  cancelAtPeriodEnd  Boolean @default(false) @map("cancel_at_period_end")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model Exercise {
  id                       String                    @id @default(cuid())
  name                     String
  user                     User?                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                   String?                   @map("user_id")
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  primaryMuscleGroups      MuscleGroup[]             @relation("PrimaryMuscleGroups")
  otherMuscleGroups        MuscleGroup[]             @relation("OtherMuscleGroups")
  shared                   Boolean                   @default(false) // Whether this exercise is shared by all users.
  routinesExercises        RoutineExercise[]
  trainingSessionExercises TrainingSessionExercise[]

  @@unique([name, userId])
  @@map("exercises")
}

model MuscleGroup {
  id                 String     @id @default(cuid())
  name               String     @unique // The name of the muscle group, like "Chest" or "Back" for example.
  primaryOfExercises Exercise[] @relation("PrimaryMuscleGroups")
  otherOfExercises   Exercise[] @relation("OtherMuscleGroups")

  @@map("muscle_groups")
}

model Folder {
  id        String    @id @default(cuid())
  name      String    @unique // The name of the program, like PPL
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String    @map("user_id")
  routines  Routine[]
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  order     Int       @default(1)

  @@unique([name, userId])
  @@map("folders")
}

model Routine {
  id                 String             @id @default(cuid())
  name               String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String             @map("user_id")
  folder             Folder             @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderId           String             @map("folder_id")
  exercises          RoutineExercise[]
  notes              String?
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at")
  trainingSessions   TrainingSession[]
  routineSupersets   RoutineSuperset[]
  trackRir           Boolean            @map("track_rir")
  previousValuesFrom PreviousValuesFrom @default(ANY) @map("previous_values_from")

  @@map("routines")
}

model RoutineExercise {
  id                           String               @id @default(cuid())
  exercise                     Exercise             @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId                   String               @map("exercise_id")
  routine                      Routine?             @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId                    String?              @map("routine_id")
  sets                         RoutineExerciseSet[]
  notes                        String?
  order                        Int // The order of the exercise, if it's the first one of the routine, then it will be 1.
  warmUpSetsRestTimerInSeconds Int?                 @map("warm_up_sets_rest_timer_in_seconds")
  normalSetsRestTimerInSeconds Int?                 @map("normal_sets_rest_timer_in_seconds")
  superset                     RoutineSuperset?     @relation(fields: [supersetId], references: [id])
  supersetId                   String?              @map("superset_id")

  @@map("routines_exercises")
}

model RoutineSuperset {
  id        String            @id @default(cuid())
  routine   Routine           @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId String            @map("routine_id")
  exercises RoutineExercise[]

  @@map("routines_supersets")
}

model RoutineExerciseSet {
  id                String           @id @default(cuid())
  number            Int
  type              SetType          @default(NORMAL)
  weight            Float?
  reps              Int?
  rir               Int? // Only applicable if RIR tracking is enabled.
  routineExercise   RoutineExercise? @relation(fields: [routineExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineExerciseId String?          @map("routine_exercise_id")

  @@map("routines_exercises_sets")
}

enum SetType {
  WARM_UP
  NORMAL
  DROP
  CLUSTER
}

model TrainingSession {
  id                       String                    @id @default(cuid())
  name                     String
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                   String                    @map("user_id")
  startedAt                DateTime                  @map("started_at")
  finishedAt               DateTime                  @map("finished_at")
  feedback                 String?
  routine                  Routine?                  @relation(fields: [routineId], references: [id])
  routineId                String?                   @map("routine_id")
  trackRir                 Boolean                   @map("track_rir")
  previousValuesFrom       PreviousValuesFrom        @default(SAME_ROUTINE) @map("previous_values_from")
  trainingSessionSupersets TrainingSessionSuperset[]
  exercises                TrainingSessionExercise[]

  @@map("training_sessions")
}

enum PreviousValuesFrom {
  ANY
  SAME_ROUTINE
}

model TrainingSessionExercise {
  id                           String                       @id @default(cuid())
  exercise                     Exercise                     @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId                   String                       @map("exercise_id")
  sets                         TrainingSessionExerciseSet[]
  notes                        String?
  order                        Int // The order of the exercise, if it's the first one of the routine, then it will be 1.
  warmUpSetsRestTimerInSeconds Int?                         @map("warm_up_sets_rest_timer_in_seconds")
  normalSetsRestTimerInSeconds Int?                         @map("normal_sets_rest_timer_in_seconds")
  superset                     TrainingSessionSuperset?     @relation(fields: [supersetId], references: [id])
  supersetId                   String?                      @map("superset_id")
  trainingSession              TrainingSession?             @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trainingSessionId            String?                      @map("training_session_id")

  @@map("training_sessions_exercises")
}

model TrainingSessionSuperset {
  id                String                    @id @default(cuid())
  trainingSession   TrainingSession           @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trainingSessionId String                    @map("training_session_id")
  exercises         TrainingSessionExercise[]

  @@map("training_session_supersets")
}

model TrainingSessionExerciseSet {
  id                        String                   @id @default(cuid())
  number                    Int
  type                      SetType                  @default(NORMAL)
  weight                    Float
  reps                      Int
  rir                       Int? // Only applicable if RIR tracking is enabled.
  trainingSessionExercise   TrainingSessionExercise? @relation(fields: [trainingSessionExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trainingSessionExerciseId String?

  @@map("training_sessions_exercises_sets")
}
