datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  password            Password?
  exercises           Exercise[]
  mesocycles          Mesocycle[]    @relation("ExistingMesocycles")
  mesocyclesRuns      MesocycleRun[] @relation("MesocyclesRuns")
  currentMesocycleRun MesocycleRun?

  @@map("users")
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @map("user_id")

  @@map("passwords")
}

model AccessRequest {
  id             String   @id @default(cuid())
  email          String   @unique
  approved       Boolean  @default(false)
  currentLogbook String?  @map("current_logbook") // What the user is currently using as their logbook (Notes on their phone, some app like Strong, etc...)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("access_requests")
}

enum JointPain {
  NONE
  LOW
  MODERATE
  HIGH
}

model Exercise {
  id                              String                         @id @default(cuid())
  name                            String
  jointPain                       JointPain?                     @default(NONE) @map("joint_pain")
  user                            User?                          @relation(fields: [userId], references: [id])
  userId                          String?                        @map("user_id")
  notes                           String? // Notes about the exercise like a link to a youtube video, notes about the execution of the exercise etc.
  createdAt                       DateTime                       @default(now()) @map("created_at")
  updatedAt                       DateTime                       @updatedAt @map("updated_at")
  muscleGroups                    MuscleGroup[]
  mesocyclesTrainingDaysExercises MesocycleTrainingDayExercise[]

  @@unique([name, userId])
  @@map("exercises")
}

model MuscleGroup {
  id        String     @id @default(cuid())
  name      String     @unique // The name of the muscle group, like "Chest" or "Back" for example.
  exercises Exercise[]

  @@map("muscle_groups")
}

model Mesocycle {
  id           String                 @id @default(cuid())
  name         String
  microcycles  Int
  restDays     Int[]                  @map("rest_days")
  goal         String?
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")
  trainingDays MesocycleTrainingDay[]
  user         User?                  @relation("ExistingMesocycles", fields: [userId], references: [id])
  userId       String?                @map("user_id")
  runs         MesocycleRun[]

  @@unique([name, userId])
  @@map("mesocycles")
}

model MesocycleTrainingDay {
  id          String                         @id @default(cuid())
  mesocycle   Mesocycle?                     @relation(fields: [mesocycleId], references: [id])
  mesocycleId String?                        @map("mesocycle_id")
  label       String // The label of the training day, it could be "Day 1" or "Monday" or "Push Day 1" for example.
  number      Int // The number of the day, if it is 2 then it will be the 2nd training day.
  exercises   MesocycleTrainingDayExercise[]

  @@map("mesocycles_training_days")
}

model MesocycleTrainingDayExercise {
  id                     String                            @id @default(cuid())
  sets                   MesocycleTrainingDayExerciseSet[]
  number                 Int // The number of the exercise, if it is 2 then it will be the 2nd exercise.
  notes                  String?
  exercise               Exercise                          @relation(fields: [exerciseId], references: [id])
  exerciseId             String                            @map("exercise_id")
  mesocycleTrainingDay   MesocycleTrainingDay?             @relation(fields: [mesocycleTrainingDayId], references: [id])
  mesocycleTrainingDayId String?                           @map("mesocycle_training_day_id")

  @@map("mesocycle_training_days_exercises")
}

model MesocycleTrainingDayExerciseSet {
  id                             String                        @id @default(cuid())
  number                         Int // The set number, like set 1 or set 2
  weight                         Float
  rir                            Int // Reps in reserve
  repRangeLowerBound             Int                           @map("rep_range_lower_bound") // If rep range is 5-8 reps then this would be 5 
  repRangeUpperBound             Int                           @map("rep_range_upper_bound") // If rep range is 5-8 reps then this would be 8
  mesocycleTrainingDayExercise   MesocycleTrainingDayExercise? @relation(fields: [mesocycleTrainingDayExerciseId], references: [id])
  mesocycleTrainingDayExerciseId String?                       @map("mesocycle_training_day_exercise_id")

  @@map("mesocycle_training_days_exercises_sets")
}

model MesocycleRun {
  id            String     @id @default(cuid())
  mesocycle     Mesocycle? @relation(fields: [mesocycleId], references: [id])
  mesocycleId   String?    @unique @map("mesoycle_id")
  startDate     DateTime   @map("start_date")
  endDate       DateTime   @map("end_date")
  ranByUser     User?      @relation("MesocyclesRuns", fields: [ranByUserId], references: [id])
  ranByUserId   String?    @map("ran_by_user_id")
  currentUser   User?      @relation(fields: [currentUserId], references: [id])
  currentUserId String?    @unique

  @@map("mesocycles_runs")
}
